[["index.html", "hespresso â˜• hespresso", " hespresso â˜• hespresso hespresso blends homeolog expression ðŸ§¬ with espresso â˜•, capturing the essence of power, energy, and focus in homeolog expression analysis. It provides statistical tests for detecting shifts in homeolog expression ratios among subgenomes of allopolyploid species across diverse conditions, using RNA-Seq read count data. Take a sip of hespresso â˜•, and start your analysis strong! Allopolyploids arise through hybridization between two or more related species and contain multiple sets of chromosomes derived from distinct progenitors, referred to as subgenomes. Genes duplicated across these subgenomes, termed homeologs, provide opportunities for functional diversification (Soltis et al. 2015). By modulating the balance of homeolog expression, allopolyploids can respond flexibly to developmental and environmental changes (Deb et al. 2023). This plasticity is thought to enhance their adaptability and may allow them to occupy broader ecological niches than their progenitors (Shimizu 2022; Tossi et al. 2022). For example, Akama et al.Â and Paape et al.Â reported that a small proportion of homeologs in Arabidopsis kamchatica (2n = 4x = 32, HHLL), an allotetraploid derived from Arabidopsis halleri (2n = 2x = 16, HH) and Arabidopsis lyrata (2n = 2x = 16, LL), exhibited shifts in expression ratios under cold and zinc stress, respectively (Akama et al. 2014; Paape et al. 2016). Similarly, Akiyama et al.Â found that the allotetraploid Cardamine flexuosa (2n = 4x = 32, HHAA), derived from Cardamine hirsuta (2n = 2x = 16, HH) and Cardamine amara (2n = 2x = 16, AA), displays distinct patterns of homeolog expression ratios across ecological habitats (Akiyama et al. 2021). Detecting such changes is therefore essential for understanding the regulatory mechanisms underlying allopolyploid evolution and adaptation, and the hespresso package provides a means to detect homeologs with shifted expression ratios across diverse conditions using RNA-Seq data from allopolyploids. It implements two methods, HOBIT (Sun et al. 2025) and HomeoRoq (Akama et al. 2014). HOBIT accommodates a wide range of polyploid systems, including those with uneven or complex subgenome compositions, and supports comparisons across multiple conditions. In contrast, HomeoRoq is tailored for detecting ratio shifts between two conditions in allotetraploids. Benchmarking with simulated data indicates that HOBIT achieves a more balanced trade-off between precision and recall, yielding higher AUC and F1 scores, whereas HomeoRoq favors higher precision at the cost of reduced recall (Sun et al. 2025). Whether applied to tissues, developmental stages, stress treatments, or ecological habitats, hespresso provides the statistical power and flexibility required for robust homeolog expression analysis. Insights demand curiosity, endurance demands coffee; hespresso delivers both â˜•. "],["installation.html", "1 Installation", " 1 Installation To install the hespresso package, start R (version 4.5 or later) and run the following commands: # CRAN Packages install.packages(c(&quot;remotes&quot;, &quot;foreach&quot;, &quot;doParallel&quot;, &quot;progressr&quot;, &quot;ggplot2&quot;)) # Bioconductor Packages if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;edgeR&quot;) # cmdstanr install.packages(&quot;cmdstanr&quot;, repos = c(&quot;https://stan-dev.r-universe.dev&quot;, getOption(&quot;repos&quot;))) install_cmdstan() # hespresso remotes::install_github(&quot;bitdessin/hespresso&quot;) Because hespresso relies on cmdstanr (Gabry et al. 2025), which is not available on CRAN or Bioconductor, it cannot be hosted on these repositories, making the installation slightly more complex than that of typical R packages. "],["quick-start.html", "2 Quick Start", " 2 Quick Start The following example illustrates the complete workflow for HOBIT, from loading the data to performing the statistical test. # gene expression gexp &lt;- read.table(&quot;data/c_flexuosa.0516.mini.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;, row.names = 1) # experimental groups group &lt;- c(&quot;wet&quot;, &quot;wet&quot;, &quot;wet&quot;, &quot;dry&quot;, &quot;dry&quot;, &quot;dry&quot;) # mapping table to organize gene expression into homeolog expression mapping_table &lt;- read.table(&quot;data/c_flexuosa.homeolog.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;) # data preparation x &lt;- newExpMX(gexp, group, mapping_table) # normalization x &lt;- norm_counts(x) # statistical test x_output &lt;- hobit(x) head(x_output) ## gene pvalue qvalue raw_pvalue raw_qvalue Dmax ORmax theta__C_hirsuta__dry theta__C_amara__dry theta__C_hirsuta__wet theta__C_amara__wet theta0__C_hirsuta theta0__C_amara logLik_H1 logLik_H0 ## 1 CARHR000350_H 0.3215307 1 0.2359216 1 0.04429900 1.640839 0.1237370 0.8762630 0.07953355 0.9204665 0.1032180 0.8967820 -47.09060 -47.76925 ## 2 CARHR000580_H 0.6048701 1 0.5361618 1 0.08222850 1.459079 0.3751135 0.6248865 0.29209800 0.7079020 0.3358520 0.6641480 -42.30165 -42.38060 ## 3 CARHR001360_H 1.0000000 1 1.0000000 1 0.00163000 1.006819 0.5810475 0.4189525 0.57942500 0.4205750 0.5798730 0.4201270 -67.29455 -66.95495 ## 4 CARHR001380_H 0.3277932 1 0.2420010 1 0.13629500 1.737106 0.5506165 0.4493835 0.41570450 0.5842955 0.4827510 0.5172490 -67.96765 -68.75165 ## 5 CARHR001400_H 0.6512444 1 0.5888779 1 0.04783315 1.877626 0.8826860 0.1173140 0.93314150 0.0668586 0.9022545 0.0977455 -41.90850 -41.93400 ## 6 CARHR001480_H 0.9037590 1 0.8850520 1 0.05310200 1.254081 0.4105745 0.5894255 0.35558800 0.6444120 0.3841415 0.6158585 -54.05080 -53.92880 The following example demonstrates the workflow for HomeoRoq. Compared to HOBIT, the only difference is that the statistical test is performed using the homeoroq() function instead of hobit(). gexp &lt;- read.table(&quot;data/c_flexuosa.0516.mini.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;, row.names = 1) group &lt;- c(&quot;wet&quot;, &quot;wet&quot;, &quot;wet&quot;, &quot;dry&quot;, &quot;dry&quot;, &quot;dry&quot;) mapping_table &lt;- read.table(&quot;data/c_flexuosa.homeolog.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;) x &lt;- newExpMX(gexp, group, mapping_table) x &lt;- norm_counts(x) x_output &lt;- homeoroq(x) head(x_output) ## gene pvalue qvalue sumexp__wet__C_hirsuta sumexp__wet__C_amara sumexp__dry__C_hirsuta sumexp__dry__C_amara ratio__wet__C_hirsuta ratio__dry__C_hirsuta ratio_sd ## 1 CARHR000350_H 0.563575 1 44.41277 504.994715 43.73729 319.95367 0.08083758 0.07970611 0.03421429 ## 2 CARHR000580_H 0.720650 1 60.75627 147.119479 56.29544 94.87458 0.29227204 0.27675177 0.05769653 ## 3 CARHR001360_H 0.999950 1 1054.50900 758.465421 937.45041 668.95348 0.58164582 0.55276942 0.01598056 ## 4 CARHR001380_H 0.432550 1 207.83502 295.104109 143.04677 117.38436 0.41324091 0.32647834 0.08361259 ## 5 CARHR001400_H 0.957275 1 71.75076 5.583816 83.95502 10.24313 0.92779663 0.93763805 0.10320192 ## 6 CARHR001480_H 0.996500 1 87.59598 159.502354 79.72566 110.13494 0.35449846 0.33326221 0.06667744 "],["tutorials.html", "3 Tutorials", " 3 Tutorials This chapter provides step-by-step tutorials demonstrating the use of hespresso with real RNA-Seq datasets from diverse allopolyploids, including allotetraploid, allohexaploid, and allotriploid. Workflows cover data preparation, normalization, and statistical testing with HOBIT or HomeoRoq, illustrating practical strategies to detect shifts in homeolog expression ratios across developmental stages, stress treatments, and ecological habitats. "],["allohexaploid-c.-flexuosa.html", "3.1 Allohexaploid C. flexuosa", " 3.1 Allohexaploid C. flexuosa 3.1.1 Introduction Cardamine flexuosa (2n = 4x = 32, HHAA), wavy bittercress, is an allopolyploid species that originated from two diploid progenitors, Cardamine hirsuta (2n = 2x = 16, HH) and Cardamine amara (2n = 2x = 16, AA) (MandÃ¡kovÃ¡ et al. 2014). While C. hirsuta is typically adapted to dry habitats such as roadsides, C. amara inhabits wet environments such as riversides or running streams. The allopolyploid C. flexuosa thrives across a wide range of ecological habitats. Akiyama et al.Â conducted an RNA-Seq experiment using leaf samples of C. flexuosa collected from wet and dry habitats across three different days (Akiyama et al. 2021). Each habitatâ€“date combination included two or three biological replicates. Homeolog expression levels were quantified using read counts processed through the HomeoRoq sorting pipeline (Akama et al. 2014). Analysis of homeolog expression ratios revealed that a small percentage of homeologs in C. flexuosa exhibit shifts in expression depending on environmental differences, wet and dry. 3.1.2 Data Preparation In this example, we demonstrate how to use HOBIT and HomeoRoq to analyze the C. flexuosa dataset. To reduce computation time, we focus on samples collected on May 16, 2013, and randomly select 1,000 homeolog pairs (c_flexuosa.0516.mini.txt.gz). Users can, however, analyze the full dataset or samples from other dates. These datasets are available in the data directory, and the same workflow can be applied. gexp &lt;- read.table(&quot;../data/c_flexuosa.0516.mini.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;, row.names = 1) head(gexp) ## wet_1 wet_2 wet_3 dry_1 dry_2 dry_3 ## CARHR000350_H 21 8 17 19 10 14 ## CARHR000580_H 24 21 14 26 11 19 ## CARHR001360_H 440 264 364 394 272 248 ## CARHR001380_H 36 109 48 52 52 32 ## CARHR001400_H 10 11 59 30 23 27 ## CARHR001480_H 27 17 49 40 25 15 group &lt;- c(&quot;wet&quot;, &quot;wet&quot;, &quot;wet&quot;, &quot;dry&quot;, &quot;dry&quot;, &quot;dry&quot;) Next, load the homeolog mapping table, which links gene expression values to their corresponding homeologs. This table is a tab-separated file in which the first and second columns represent gene names from C. hirsuta and C. amara, respectively. mapping_table &lt;- read.table(&quot;../data/c_flexuosa.homeolog.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;) head(mapping_table) ## C_hirsuta C_amara ## 1 CARHR000010_H CARHR000010_A ## 2 CARHR000060_H CARHR000060_A ## 3 CARHR000070_H CARHR000070_A ## 4 CARHR000090_H CARHR000090_A ## 5 CARHR000110_H CARHR000110_A ## 6 CARHR000120_H CARHR000120_A We then use the newExpMX() function to organize the gene expression matrix (gexp) into a homeolog expression matrix using the mapping table (mapping_table) and store the result in an ExpMX class object. x &lt;- newExpMX(gexp, group, mapping_table) x ## # 2 subgenomes (C_hirsuta, C_amara) ## # 1000 homeologs ## --------------------- ## Experiment Design: ## group ## 1 wet ## 2 wet ## 3 wet ## 4 dry ## 5 dry ## 6 dry ## --------------------- ## &gt; subgenome: C_hirsuta ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 21 8 17 19 10 14 ## [2,] 24 21 14 26 11 19 ## [3,] 440 264 364 394 272 248 ## [4,] 36 109 48 52 52 32 ## [5,] 10 11 59 30 23 27 ## [6,] 27 17 49 40 25 15 ## +++++++++++++++++++++ ## &gt; subgenome: C_amara ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 152 168 183 151 92 75 ## [2,] 54 44 49 46 22 27 ## [3,] 344 181 242 257 203 183 ## [4,] 73 150 49 43 37 32 ## [5,] 4 0 2 2 6 1 ## [6,] 30 23 124 48 32 28 ## --------------------- Before performing the test, we normalize the raw read counts using the TMM method (Robinson and Oshlack 2010) to adjust for differences in library size. However, if the expression data (gexp) has already been normalized (e.g.Â FPKM), this step can be skipped. x &lt;- norm_counts(x) To visualize the distributions of homeolog expression ratios, use the plot_HER_distr() function. This function returns a list of histograms, one for each condition, showing the distribution of homeolog expression ratios. distr_plots &lt;- plot_HER_distr(x) names(distr_plots) ## [1] &quot;wet&quot; &quot;dry&quot; By default, the expression ratio is calculated as the proportion contributed by the first subgenome relative to all subgenomes. In this dataset, the first subgenome is derived from C. hirsuta, as indicated by the first column in the mapping table (mapping_table). To display the distribution of homeolog expression ratios for each experimental group, run the following code. library(ggplot2) library(gridExtra) grid.arrange(distr_plots[[&quot;wet&quot;]] + ggtitle(&quot;wet&quot;), distr_plots[[&quot;dry&quot;]] + ggtitle(&quot;dry&quot;), ncol = 2) Figure 3.1: Distribution of homeolog expression ratios in C. flexuosa under wet and dry habitats. After visually inspecting the distributions, if no irregularities are observed, users can proceed to apply the statistical test. 3.1.3 HOBIT HOBIT can be executed using the hobit() function, which performs a statistical test to detect homeologs with shifts in expression ratios between wet and dry habitats. Analyzing 1,000 homeolog pairs with eight threads takes approximately five minutes. x_output &lt;- hobit(x) The order of the test output matches that of the input. head(x_output) ## gene pvalue qvalue raw_pvalue raw_qvalue Dmax ORmax theta__C_hirsuta__dry theta__C_amara__dry theta__C_hirsuta__wet theta__C_amara__wet theta0__C_hirsuta theta0__C_amara logLik_H1 logLik_H0 ## 1 CARHR000350_H 0.3253319 1 0.2396078 1 0.0448685 1.663141 0.1253715 0.8746285 0.07960025 0.92039950 0.1036990 0.89630100 -47.05505 -47.70480 ## 2 CARHR000580_H 0.6133947 1 0.5457975 1 0.0821525 1.465043 0.3767205 0.6232795 0.29091800 0.70908200 0.3353605 0.66463950 -42.30920 -42.35770 ## 3 CARHR001360_H 1.0000000 1 1.0000000 1 0.0004880 1.001988 0.5810760 0.4189240 0.58084650 0.41915350 0.5802035 0.41979650 -67.25310 -66.94940 ## 4 CARHR001380_H 0.3431881 1 0.2570826 1 0.1320365 1.708895 0.5500030 0.4499970 0.41447950 0.58552050 0.4831110 0.51688900 -67.96410 -68.75220 ## 5 CARHR001400_H 0.6481960 1 0.5853912 1 0.0459866 1.846449 0.8834420 0.1165580 0.93359950 0.06640005 0.9043115 0.09568855 -41.85770 -41.90815 ## 6 CARHR001480_H 1.0000000 1 1.0000000 1 0.0537910 1.261780 0.4093955 0.5906045 0.35391850 0.64608150 0.3845520 0.61544800 -54.03790 -53.88225 To rank the output in descending order of p-values, use the following code. head(x_output[order(x_output$pvalue), ]) ## gene pvalue qvalue raw_pvalue raw_qvalue Dmax ORmax theta__C_hirsuta__dry theta__C_amara__dry theta__C_hirsuta__wet theta__C_amara__wet theta0__C_hirsuta theta0__C_amara logLik_H1 logLik_H0 ## 980 CARHR289110_H 3.127442e-08 1.573060e-05 3.671593e-11 1.851358e-08 0.4635909 128.904980 0.5266430 0.4733570 0.9930045 0.00699555 0.7576215 0.2423785 -31.33400 -53.03600 ## 537 CARHR155190_H 3.146119e-08 1.573060e-05 3.702717e-11 1.851358e-08 0.4449000 7.874459 0.3839395 0.6160605 0.8334040 0.16659600 0.6085220 0.3914780 -135.15100 -157.04800 ## 12 CARHR002710_H 2.349679e-07 6.145125e-05 6.388189e-10 1.702323e-07 0.6906636 206.664157 0.0122882 0.9877120 0.7176940 0.28230600 0.3715680 0.6284320 -75.89975 -94.52055 ## 135 CARHR032730_H 2.458050e-07 6.145125e-05 6.809291e-10 1.702323e-07 0.2246896 29.324336 0.7648575 0.2351425 0.9895090 0.01049100 0.8769085 0.1230915 -46.14340 -65.39720 ## 481 CARHR139340_H 2.714965e-06 5.429929e-04 2.034879e-08 4.069758e-06 0.3498725 4.443672 0.6189910 0.3810090 0.2654020 0.73459800 0.4437415 0.5562585 -183.45350 -199.11850 ## 346 CARHR099310_H 3.022336e-05 4.437007e-03 6.104695e-07 9.062792e-05 0.3087950 4.443908 0.1754890 0.8245110 0.4880245 0.51197550 0.3332475 0.6667525 -56.89240 -69.17890 To visualize homeologs with shifts in expression ratios between wet and dry habitats, use the plot_HER() function. This function generates a scatter plot comparing the expression ratios calculated for the wet and dry groups. By default, the expression ratio is defined as the proportion contributed by the first subgenome (i.e., the subgenome derived from C. hirsuta) relative to the total expression across all subgenomes. In the example below, homeologs with q-values less than 0.01 are highlighted. is_sig &lt;- ifelse(x_output$qvalue &lt; 0.01, &quot;q&lt;0.01&quot;, &quot;q&gt;=0.01&quot;) plot_HER(x, label = is_sig) Figure 3.2: Changes in homeolog expression ratios between wet (x-axis) and dry (y-axis) habitats. Orange points indicate homeologs with significant shifts detected by HOBIT, while gray points represent homeologs without significant changes. 3.1.4 HomeoRoq For allopolyploids composed of two subgenomes under two different conditions, HomeoRoq is also a suitable option for detecting homeologs with shifts in expression ratios. It can be executed using the homeoroq() function in the same way as hobit(), as shown below. x_homeoroq &lt;- homeoroq(x) head(x_homeoroq[order(x_homeoroq$pvalue), ]) ## gene pvalue qvalue sumexp__wet__C_hirsuta sumexp__wet__C_amara sumexp__dry__C_hirsuta sumexp__dry__C_amara ratio__wet__C_hirsuta ratio__dry__C_hirsuta ratio_sd ## 12 CARHR002710_H 0 0 108.3058 43.55477 0.00000 122.9599 0.7131924 0.0000000 0.4620698 ## 36 CARHR007170_H 0 0 126.8994 73.38890 12.23196 107.3753 0.6335838 0.1428620 0.2653866 ## 52 CARHR011940_H 0 0 1373.8547 1516.85937 1437.42566 394.6598 0.4752648 0.4865562 0.1539877 ## 127 CARHR029790_H 0 0 908.8552 775.44869 918.46735 1816.7147 0.5396029 0.5422154 0.1031771 ## 346 CARHR099310_H 0 0 458.0346 476.57672 116.10371 558.3269 0.4900803 0.1958960 0.1671791 ## 481 CARHR139340_H 0 0 358.4102 992.02619 768.18035 828.8006 0.2654033 0.4364149 0.2223759 The overlap of homeologs with shifts in expression ratios detected by HOBIT and HomeoRoq can be visualized using an UpSet plot, which is implemented in the UpSetR package (Conway et al. 2017). library(&quot;UpSetR&quot;) sig_homeologs &lt;- list( HOBIT = x_output$gene[x_output$qvalue &lt; 0.01], HomeoRoq = x_homeoroq$gene[x_homeoroq$qvalue &lt; 0.01] ) upset(fromList(sig_homeologs)) Figure 3.3: Overlap of homeologs with shifted expression ratios detected by HOBIT and HomeoRoq. Additionally, homeologs with shifts in expression ratios detected by both methods can be visualized using the plot_HER() function. is_sig &lt;- rep(&quot;n.s.&quot;, length = nrow(x_output)) is_sig[x_output$qvalue &lt; 0.01] &lt;- &quot;HOBIT&quot; is_sig[x_homeoroq$qvalue &lt; 0.01] &lt;- &quot;HomeoRoq&quot; is_sig[x_output$qvalue &lt; 0.01 &amp; x_homeoroq$qvalue &lt; 0.01] &lt;- &quot;HOBIT&amp;HomeoRoq&quot; is_sig &lt;- factor(is_sig, levels = c(&quot;n.s.&quot;, &quot;HOBIT&quot;, &quot;HomeoRoq&quot;, &quot;HOBIT&amp;HomeoRoq&quot;)) plot_HER(x, label = is_sig) Figure 3.4: Comparison of homeologs with changes in expression ratios detected by HOBIT and HomeoRoq. Each point represents a homeolog expression ratio in wet (x-axis) and dry (y-axis) conditions. Points labeled as n.s. indicate homeologs without significant changes detected by either method; other points represent homeologs identified as having significant changes by the respective method. 3.1.5 Analysis Environment sessionInfo() ## R version 4.5.0 (2025-04-11) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.6.1 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib; LAPACK version 3.12.1 ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## time zone: Asia/Tokyo ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] pROC_1.18.5 UpSetR_1.4.0 gridExtra_2.3 ggplot2_3.5.2 hespresso_1.0.0 ## ## loaded via a namespace (and not attached): ## [1] tensorA_0.36.2.1 sass_0.4.10 generics_0.1.4 lattice_0.22-7 digest_0.6.37 magrittr_2.0.3 evaluate_1.0.3 grid_4.5.0 RColorBrewer_1.1-3 bookdown_0.44 iterators_1.0.14 fastmap_1.2.0 plyr_1.8.9 foreach_1.5.2 doParallel_1.0.17 jsonlite_2.0.0 processx_3.8.6 backports_1.5.0 limma_3.64.1 ps_1.9.1 scales_1.4.0 codetools_0.2-20 jquerylib_0.1.4 abind_1.4-8 cli_3.6.5 rlang_1.1.6 cmdstanr_0.9.0 splines_4.5.0 withr_3.0.2 cachem_1.1.0 yaml_2.3.10 tools_4.5.0 parallel_4.5.0 checkmate_2.3.2 dplyr_1.1.4 locfit_1.5-9.12 vctrs_0.6.5 posterior_1.6.1 R6_2.6.1 lifecycle_1.0.4 edgeR_4.6.2 pkgconfig_2.0.3 progressr_0.15.1 pillar_1.10.2 bslib_0.9.0 gtable_0.3.6 Rcpp_1.1.0 glue_1.8.0 ## [49] statmod_1.5.0 tidyselect_1.2.1 xfun_0.52 tibble_3.2.1 rstudioapi_0.17.1 knitr_1.50 farver_2.1.2 htmltools_0.5.8.1 labeling_0.4.3 rmarkdown_2.29 compiler_4.5.0 distributional_0.5.0 "],["allohexaploid-t.-aestivum.html", "3.2 Allohexaploid T. aestivum", " 3.2 Allohexaploid T. aestivum 3.2.1 Introduction Bread wheat, Triticum aestivum, is one of the worldâ€™s most important crops and also serves as a model for studying allopolyploid species. It originated through hybridization among three diploid progenitor species, Triticum urartu (AA), a species related to Aegilops speltoides (BB), and Aegilops tauschii (DD), and contains three distinct subgenomes (IWGSC 2018; Levy and Feldman 2022; Zhao et al. 2023). To demonstrate the applicability of HOBIT to allohexaploid species, we present a case study using wheat RNA-Seq data to detect homeologs with shifts in expression ratios between two tissues, shoot apex and leaf (Yang et al. 2021). 3.2.2 Data Preparation In this example, 1,000 homeolog triads were randomly selected from the original dataset. The expression data can be loaded from the following file (t_aestivum.w20.mini.txt.gz). Users may also choose to load the full dataset, which is stored in the data directory, for analysis. gexp &lt;- read.table(&quot;../data/t_aestivum.w20.mini.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;, row.names = 1) head(gexp) ## shootapex_1 shootapex_2 shootapex_3 leaf_1 leaf_2 leaf_3 ## TraesCS1A02G009000 256 245 255 118 215 200 ## TraesCS1A02G011200 22 21 31 24 24 12 ## TraesCS1A02G033800 13 10 9 0 1 0 ## TraesCS1A02G038400 990 917 975 5 3 7 ## TraesCS1A02G042500 203 207 183 0 0 1 ## TraesCS1A02G045800 10 11 20 222 408 313 group &lt;- c(&quot;apex&quot;, &quot;apex&quot;, &quot;apex&quot;, &quot;leaf&quot;, &quot;leaf&quot;, &quot;leaf&quot;) Next, load the mapping table that links each gene to its corresponding homeolog triads. Since wheat has three subgenomes, the table contains three columns, with each column representing one subgenome. mapping_table &lt;- read.table(&quot;../data/t_aestivum.homeolog.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;) head(mapping_table) ## A B D ## 1 TraesCS1A02G000800 TraesCS6B02G173200LC TraesCS5D02G023700 ## 2 TraesCS1A02G000900 TraesCS6B02G117800 TraesCS7D02G119300 ## 3 TraesCS1A02G001600 TraesCS1B02G320300 TraesCS7D02G148100LC ## 4 TraesCS1A02G001900 TraesCS1B02G000800 TraesCS1D02G003900 ## 5 TraesCS1A02G002000 TraesCS1B02G000900 TraesCS1D02G004000 ## 6 TraesCS1A02G002100 TraesCS1B02G001000 TraesCS1D02G004100 We then construct an ExpMX class object using the newExpMX() function. This converts the gene expression matrix (gexp) into a homeolog expression matrix based on the mapping table (mapping_table). x &lt;- newExpMX(gexp, group, mapping_table) x ## # 3 subgenomes (A, B, D) ## # 1000 homeologs ## --------------------- ## Experiment Design: ## group ## 1 apex ## 2 apex ## 3 apex ## 4 leaf ## 5 leaf ## 6 leaf ## --------------------- ## &gt; subgenome: A ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 256 245 255 118 215 200 ## [2,] 22 21 31 24 24 12 ## [3,] 13 10 9 0 1 0 ## [4,] 990 917 975 5 3 7 ## [5,] 203 207 183 0 0 1 ## [6,] 10 11 20 222 408 313 ## +++++++++++++++++++++ ## &gt; subgenome: B ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 222 254 255 50 119 124 ## [2,] 27 36 27 49 50 36 ## [3,] 52 47 46 11 7 6 ## [4,] 750 579 583 4 8 2 ## [5,] 318 382 410 0 1 1 ## [6,] 0 0 0 17 16 17 ## +++++++++++++++++++++ ## &gt; subgenome: D ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 203 212 199 36 92 90 ## [2,] 50 51 57 37 53 40 ## [3,] 5 6 4 3 0 2 ## [4,] 473 441 475 12 16 4 ## [5,] 456 454 427 6 1 3 ## [6,] 129 127 146 497 1217 1189 ## --------------------- Before performing the test, we normalize the raw read counts using the TMM method (Robinson and Oshlack 2010) to adjust for differences in library size. However, if the expression data (gexp) has already been normalized (e.g.Â FPKM), this step can be skipped. x &lt;- norm_counts(x) To visualize the distributions of homeolog expression ratios, use the plot_HER_distr() function. By default, the expression ratio is calculated as the proportion contributed by the first subgenome relative to all subgenomes. In this dataset, the first subgenome corresponds to the A-subgenome, as indicated by the first column of the mapping table (mapping_table). distr_plots_A &lt;- plot_HER_distr(x) names(distr_plots_A) ## [1] &quot;apex&quot; &quot;leaf&quot; library(ggplot2) library(gridExtra) grid.arrange(distr_plots_A[[&quot;apex&quot;]] + ggtitle(&quot;apex on A subgenome&quot;), distr_plots_A[[&quot;leaf&quot;]] + ggtitle(&quot;leaf on A subgenome&quot;), ncol = 2) Figure 3.5: Distribution of homeolog expression ratios between shoot apex and leaf in the A-subgenome of wheat. To calculate expression ratios from the second or third subgenome, set the base option accordingly. For example, to calculate the ratios for the second and third subgenomes (i.e., B-subgenome and D-subgenome), set base = 2 and base = 3, respectively. distr_plots_B &lt;- plot_HER_distr(x, base = 2) distr_plots_D &lt;- plot_HER_distr(x, base = 3) grid.arrange(distr_plots_A[[&quot;apex&quot;]] + ggtitle(&quot;apex on A&quot;), distr_plots_A[[&quot;leaf&quot;]] + ggtitle(&quot;leaf on A&quot;), distr_plots_B[[&quot;apex&quot;]] + ggtitle(&quot;apex on B&quot;), distr_plots_B[[&quot;leaf&quot;]] + ggtitle(&quot;leaf on B&quot;), distr_plots_D[[&quot;apex&quot;]] + ggtitle(&quot;apex on D&quot;), distr_plots_D[[&quot;leaf&quot;]] + ggtitle(&quot;leaf on D&quot;), ncol = 2) Figure 3.6: Distribution of homeolog expression ratios between shoot apex and leaf across all subgenomes. Histogram peaks at one-third for all subgenomes indicate that most homeologs in wheat are equally expressed from the three subgenomes. 3.2.3 Statistical Test After visually inspecting the distributions of homeolog expression ratios, use the hobit() function to identify homeologs showing significant changes in expression ratios between shoot apex and leaf tissues. This step takes approximately five minutes using eight threads and may vary depending on hardware performance. x_output &lt;- hobit(x) head(x_output) ## gene pvalue qvalue raw_pvalue raw_qvalue Dmax ORmax theta__A__apex theta__B__apex theta__D__apex theta__A__leaf theta__B__leaf theta__D__leaf theta0__A theta0__B theta0__D logLik_H1 logLik_H0 ## 1 TraesCS1A02G009000 8.696609e-03 2.643346e-02 1.133099e-03 3.444069e-03 0.1448480 1.815553 0.3587875 0.348272500 0.2918025 0.50432450 0.27980250 0.2099645 0.4319615 0.314246000 0.2513570 -86.71820 -93.45285 ## 2 TraesCS1A02G011200 3.527622e-01 5.010827e-01 2.254854e-01 3.202917e-01 0.1320795 1.811967 0.2266725 0.276752000 0.4921475 0.18890200 0.40919000 0.3920710 0.2091740 0.344837000 0.4431745 -64.51790 -65.83085 ## 3 TraesCS1A02G033800 5.438784e-02 1.155177e-01 1.557326e-02 3.308250e-02 0.1193433 3.906846 0.1647610 0.760828000 0.0714798 0.04790415 0.73972300 0.1923665 0.1114145 0.746659500 0.1338610 -39.94355 -43.89195 ## 4 TraesCS1A02G038400 3.349351e-16 1.594929e-14 7.554204e-23 3.597240e-21 0.2787295 3.492158 0.4664375 0.308372000 0.2247815 0.24561800 0.22612250 0.5042635 0.3555395 0.268432000 0.3635740 -73.46170 -124.26850 ## 5 TraesCS1A02G042500 2.729579e-09 4.402547e-08 5.724942e-13 9.233778e-12 0.2430330 2.744239 0.1947140 0.365449500 0.4387245 0.10636100 0.17506650 0.6810465 0.1501335 0.269729000 0.5585960 -56.57470 -84.81420 ## 6 TraesCS1A02G045800 5.965812e-04 2.560434e-03 2.459053e-05 1.055388e-04 0.1645745 6.926095 0.0920326 0.002089305 0.9048555 0.24607950 0.01400095 0.7393605 0.1695830 0.008482395 0.8211180 -72.41100 -83.04700 The output can be sorted in ascending order of p-values using the following code. head(x_output[order(x_output$pvalue), ]) ## gene pvalue qvalue raw_pvalue raw_qvalue Dmax ORmax theta__A__apex theta__B__apex theta__D__apex theta__A__leaf theta__B__leaf theta__D__leaf theta0__A theta0__B theta0__D logLik_H1 logLik_H0 ## 891 TraesCS7A02G209600 7.897716e-35 7.003971e-32 1.778006e-49 1.778006e-46 0.7214820 71.60537 0.4919380 0.233291500 0.273683000 0.02099795 0.95637300 0.02070660 0.2575725 0.5938435 0.1482310 -69.54315 -181.6070 ## 933 TraesCS7A02G313100 1.400794e-34 7.003971e-32 4.033650e-49 2.016825e-46 0.2912081 10.04127 0.3159835 0.340996000 0.342377500 0.44160250 0.04913975 0.50780350 0.3791785 0.1956815 0.4249365 -115.24450 -226.5475 ## 445 TraesCS3A02G438700 5.612771e-30 1.870924e-27 1.532781e-42 5.109269e-40 0.5502635 12.44399 0.3421380 0.272885500 0.383991000 0.06935165 0.82311350 0.06942305 0.2069145 0.5480310 0.2282040 -47.18400 -143.2310 ## 214 TraesCS2A02G224600 6.437637e-29 1.609409e-26 5.013273e-41 1.253318e-38 0.5859770 41.88611 0.3238605 0.348283500 0.326649500 0.91179700 0.06739785 0.01141005 0.6174870 0.2092690 0.1714410 -58.26365 -150.7845 ## 864 TraesCS7A02G119900 3.335147e-25 6.670295e-23 1.023063e-35 2.046127e-33 0.7192710 522.09016 0.9944905 0.002314735 0.002227525 0.27478050 0.29658300 0.29490100 0.6343520 0.1500650 0.1494245 -17.67280 -98.6582 ## 328 TraesCS3A02G105600 2.636676e-22 4.394460e-20 1.420887e-31 2.368145e-29 0.5242690 10.37861 0.3936030 0.243851500 0.361295000 0.08921855 0.76699050 0.09134945 0.2423015 0.5055850 0.2268060 -46.26470 -117.5220 Next, we visualize changes in expression ratios of the first subgenome between the two tissues. In the plot, homeologs with q-values less than 0.01 are highlighted. is_sig &lt;- ifelse(x_output$qvalue &lt; 0.01, &quot;q&lt;0.01&quot;, &quot;q&gt;=0.01&quot;) plot_HER(x, label = is_sig) Figure 3.7: Changes in homeolog expression ratios of the A-subgenome between shoot apex and leaf tissues. Each point represents the ratio in shoot apex (x-axis) and leaf (y-axis). Orange points indicate homeologs with significant changes, gray points indicate homeologs without significant changes. To change the subgenome used for calculating expression ratios, set the base argument to the corresponding subgenome number. For example, to use the second subgenome, run the following. plot_HER(x, base = 2, label = is_sig) Figure 3.8: Changes in homeolog expression ratios of the B-subgenome between shoot apex and leaf tissues. Each point represents the ratio in shoot apex (x-axis) and leaf (y-axis). Orange points indicate homeologs with significant changes, gray points indicate homeologs without significant changes. Note that expression ratios are calculated for the selected subgenome, while highlighted homeologs are those that meet the significance threshold in any subgenome. As a result, some homeologs may appear highlighted even if they show only minor changes in the plot, because they may have significantly altered expression ratios in another subgenome. 3.2.4 Combining Subgenomes Additionally, users who want to test expression ratios between the combined A- and B-subgenomes versus the D-subgenome can first merge the expression values of the A and B homeologs using the combine_hexp() function. After combining, the statistical test can be performed on the merged dataset. Assuming the A- and B-subgenomes are stored as the first and second subgenomes in the x object (as defined in the mapping_table), set subgenomes = c(1, 2) to combine them. x_ABvsD &lt;- combine_hexp(x, subgenomes = c(1, 2)) x_ABvsD ## # 2 subgenomes (D, A+B) ## # 1000 homeologs ## --------------------- ## Experiment Design: ## group ## 1 apex ## 2 apex ## 3 apex ## 4 leaf ## 5 leaf ## 6 leaf ## --------------------- ## &gt; subgenome: D ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 155.071321 176.087014 157.993806 53.138696 115.656439 119.284316 ## [2,] 38.194907 42.360555 45.254507 54.614770 66.628166 53.015252 ## [3,] 3.819491 4.983595 3.175755 4.428225 0.000000 2.650763 ## [4,] 361.323817 366.294213 377.120893 17.712899 20.114163 5.301525 ## [5,] 348.337548 377.092002 339.011834 8.856449 1.257135 3.976144 ## [6,] 98.542859 105.486089 115.915053 733.609214 1529.933544 1575.878355 ## +++++++++++++++++++++ ## &gt; subgenome: A+B ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 365.143307 414.46896 404.90875 247.98058 419.883158 429.423538 ## [2,] 37.431008 47.34415 46.04845 107.75347 93.028005 63.618302 ## [3,] 49.653379 47.34415 43.66663 16.23682 10.057082 7.952288 ## [4,] 1329.182751 1242.57629 1236.95653 13.28467 13.828487 11.928432 ## [5,] 397.990927 489.22288 470.80566 0.00000 1.257135 2.650763 ## [6,] 7.638981 9.13659 15.87877 352.78190 533.025327 437.375826 ## --------------------- HOBIT can then be applied to the combined dataset as below. x_ABvsD_output &lt;- hobit(x_ABvsD) head(x_ABvsD_output[order(x_ABvsD_output$pvalue), ]) ## gene pvalue qvalue raw_pvalue raw_qvalue Dmax ORmax theta__D__apex theta__A.B__apex theta__D__leaf theta__A.B__leaf theta0__D theta0__A.B logLik_H1 logLik_H0 ## 474 TraesCS4A02G029000 2.930972e-19 2.930972e-16 7.663774e-27 7.663774e-24 0.2991075 9.440408 0.355223500 0.64477650 0.05499090 0.9450090 0.2062760 0.7937240 -40.87040 -98.35210 ## 175 TraesCS2A02G145200 1.571885e-18 7.859426e-16 8.381772e-26 4.190886e-23 0.5913355 15.328096 0.194102500 0.80589750 0.78636800 0.2136320 0.4903530 0.5096470 -34.03465 -88.93955 ## 864 TraesCS7A02G119900 4.130254e-17 1.223706e-14 8.806216e-24 2.803903e-21 0.4996285 523.905472 0.002271615 0.99772850 0.50338550 0.4966145 0.2530800 0.7469200 -16.43945 -67.43060 ## 4 TraesCS1A02G038400 4.894824e-17 1.223706e-14 1.121561e-23 2.803903e-21 0.3188465 4.105482 0.224767000 0.77523300 0.54355100 0.4564490 0.3855575 0.6144425 -50.74050 -100.94100 ## 214 TraesCS2A02G224600 9.173710e-16 1.834742e-13 7.272521e-22 1.454504e-19 0.3115651 45.588657 0.327089000 0.67291100 0.01044525 0.9895550 0.1710100 0.8289900 -41.09275 -87.00505 ## 327 TraesCS3A02G098900 1.762103e-15 2.936838e-13 1.841413e-21 3.069021e-19 0.4922086 390.350835 0.997224500 0.00277519 0.50218300 0.4978170 0.7496330 0.2503670 -14.63465 -60.19225 3.2.5 Analysis Environment sessionInfo() ## R version 4.5.0 (2025-04-11) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.6.1 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib; LAPACK version 3.12.1 ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## time zone: Asia/Tokyo ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] pROC_1.18.5 UpSetR_1.4.0 gridExtra_2.3 ggplot2_3.5.2 hespresso_1.0.0 ## ## loaded via a namespace (and not attached): ## [1] tensorA_0.36.2.1 sass_0.4.10 generics_0.1.4 lattice_0.22-7 digest_0.6.37 magrittr_2.0.3 evaluate_1.0.3 grid_4.5.0 RColorBrewer_1.1-3 bookdown_0.44 iterators_1.0.14 fastmap_1.2.0 plyr_1.8.9 foreach_1.5.2 doParallel_1.0.17 jsonlite_2.0.0 processx_3.8.6 backports_1.5.0 limma_3.64.1 ps_1.9.1 scales_1.4.0 codetools_0.2-20 jquerylib_0.1.4 abind_1.4-8 cli_3.6.5 rlang_1.1.6 cmdstanr_0.9.0 splines_4.5.0 withr_3.0.2 cachem_1.1.0 yaml_2.3.10 tools_4.5.0 parallel_4.5.0 checkmate_2.3.2 dplyr_1.1.4 locfit_1.5-9.12 vctrs_0.6.5 posterior_1.6.1 R6_2.6.1 lifecycle_1.0.4 edgeR_4.6.2 pkgconfig_2.0.3 progressr_0.15.1 pillar_1.10.2 bslib_0.9.0 gtable_0.3.6 Rcpp_1.1.0 glue_1.8.0 ## [49] statmod_1.5.0 tidyselect_1.2.1 xfun_0.52 tibble_3.2.1 rstudioapi_0.17.1 knitr_1.50 farver_2.1.2 htmltools_0.5.8.1 labeling_0.4.3 rmarkdown_2.29 compiler_4.5.0 distributional_0.5.0 "],["allotriploid-c.-insueta.html", "3.3 Allotriploid C. insueta", " 3.3 Allotriploid C. insueta 3.3.1 Introduction Allotriploid Cardamine insueta (2n = 3x = 24, RRA) serves as an example of an uneven subgenome composition. Two of its subgenomes are derived from Cardamine rivularis (2n = 2x = 16, RR), a species inhabiting grassy areas away from riversides, while the third subgenome comes from Cardamine amara (2n = 2x = 16, AA), a species typically found on riversides or in streams (Urbanska-Worytkiewicz and Landolt 1972, 1974). RNA-Seq studies on C. insueta leaflets floating on water suggested that C. insueta shifts homeolog expression ratios over time following submergence (Sun et al. 2020). 3.3.2 Data Preparation Here, we demonstrate how to detect homeologs with changing expression ratios across time points using HOBIT, similar to an ANOVA approach. We use a sample dataset containing 1,000 homeologs (c_insueta.mini.txt.gz) randomly selected from the original experiment, although the full dataset is available in the data directory for users who wish to analyze it. This data span nine time points following leaf submergence and can be loaded using the following code. gexp &lt;- read.table(&quot;../data/c_insueta.mini.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;, row.names = 1) head(gexp) ## T00 T02 T04 T08 T12 T24 T48 T72 T96 ## CARHR000430_R 148 32 134 76 118 54 119 144 94 ## CARHR000770_R 88 127 17 2 56 25 35 22 17 ## CARHR000870_R 157 37 194 82 129 57 110 98 98 ## CARHR001290_R 52 18 84 35 63 12 33 43 34 ## CARHR001460_R 735 131 743 523 734 315 499 582 369 ## CARHR001580_R 420 67 344 327 585 177 341 475 368 group &lt;- c(&quot;T00&quot;, &quot;T02&quot;, &quot;T04&quot;, &quot;T08&quot;, &quot;T12&quot;, &quot;T24&quot;, &quot;T48&quot;, &quot;T72&quot;, &quot;T96&quot;) Next, load the homeolog mapping table, which links gene expression values to their corresponding homeolog pairs. This file is tab-separated, with the first and second columns representing genes from C. rivularis and C. amara, respectively. mapping_table &lt;- read.table(&quot;../data/c_insueta.homeolog.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;) head(mapping_table) ## C_rivularis C_amara ## 1 CARHR000010_R CARHR000010_A ## 2 CARHR000060_R CARHR000060_A ## 3 CARHR000090_R CARHR000090_A ## 4 CARHR000110_R CARHR000110_A ## 5 CARHR000120_R CARHR000120_A ## 6 CARHR000130_R CARHR000130_A Use the newExpMX() function to create a homeolog expression matrix from the gene expression data (gexp) and mapping table (mapping_table). The result is stored as an ExpMX class object. x &lt;- newExpMX(gexp, group, mapping_table) x ## # 2 subgenomes (C_rivularis, C_amara) ## # 1000 homeologs ## --------------------- ## Experiment Design: ## group ## 1 T00 ## 2 T02 ## 3 T04 ## 4 T08 ## 5 T12 ## 6 T24 ## 7 T48 ## 8 T72 ## 9 T96 ## --------------------- ## &gt; subgenome: C_rivularis ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] ## [1,] 148 32 134 76 118 54 119 144 94 ## [2,] 88 127 17 2 56 25 35 22 17 ## [3,] 157 37 194 82 129 57 110 98 98 ## [4,] 52 18 84 35 63 12 33 43 34 ## [5,] 735 131 743 523 734 315 499 582 369 ## [6,] 420 67 344 327 585 177 341 475 368 ## +++++++++++++++++++++ ## &gt; subgenome: C_amara ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] ## [1,] 45 15 42 34 61 34 47 44 38 ## [2,] 30 64 10 21 54 17 24 15 11 ## [3,] 98 38 107 45 61 34 108 75 37 ## [4,] 20 13 54 25 26 9 23 18 12 ## [5,] 416 87 409 331 457 196 322 393 321 ## [6,] 165 19 115 147 264 67 127 160 119 ## --------------------- Normalize the read counts using the TMM method (Robinson and Oshlack 2010), since the data has not been normalized. x &lt;- norm_counts(x) Users can visualize the distribution of homeolog expression ratios using the plot_HER_distr() function. By default, the expression ratio is calculated as the proportion contributed by the first subgenome relative to all subgenomes, where the first subgenome corresponds to C. rivularis, as listed in the first column of the mapping table (mapping_table). The plot_HER_distr() function generates a histogram for each time point. distr_plots &lt;- plot_HER_distr(x) library(ggplot2) library(gridExtra) distr_plots &lt;- lapply(seq_along(distr_plots), function(p) { distr_plots[[p]] + ggtitle(names(distr_plots)[p]) }) grid.arrange(grobs = distr_plots, ncol = 3) Figure 3.9: Distribution of homeolog expression ratios in C. insueta across nine time points following leaf submergence in water. These visualizations indicate that most homeologs in C. insueta are expressed at a 2:1 ratio between the C. rivularis and C. amara subgenomes, as shown by histogram peaks centered around two-thirds. 3.3.3 Statistical Test Next, apply the hobit() function to detect homeologs with differential expression ratios across the nine time points following leaf submergence. Since this dataset contains only one replicate per condition, set no_replicate = TRUE to avoid errors arising from dispersion estimation, which requires multiple replicates. x_output &lt;- hobit(x, no_replicate = TRUE) The test takes approximately five minutes to analyze 1,000 homeolog pairs using eight threads, although runtime may vary depending on hardware performance. head(x_output) ## gene pvalue qvalue raw_pvalue raw_qvalue Dmax ORmax theta__C_rivularis__T00 theta__C_amara__T00 theta__C_rivularis__T02 theta__C_amara__T02 theta__C_rivularis__T04 theta__C_amara__T04 theta__C_rivularis__T08 theta__C_amara__T08 theta__C_rivularis__T12 theta__C_amara__T12 theta__C_rivularis__T24 theta__C_amara__T24 theta__C_rivularis__T48 theta__C_amara__T48 theta__C_rivularis__T72 theta__C_amara__T72 theta__C_rivularis__T96 theta__C_amara__T96 theta0__C_rivularis theta0__C_amara logLik_H1 logLik_H0 ## 1 CARHR000430_R 1.0000000 1 1.0000000 1 0.1438845 2.013606 0.7533710 0.2466290 0.6699725 0.3300275 0.7497035 0.2502965 0.6787245 0.3212755 0.6467840 0.3532160 0.6046150 0.3953850 0.7031835 0.2968165 0.7531800 0.2468200 0.7045160 0.2954840 0.6869845 0.3130155 -80.92400 -79.08280 ## 2 CARHR000770_R 0.7508003 1 0.7508003 1 0.3470615 6.876720 0.7165820 0.2834180 0.6334590 0.3665410 0.6446150 0.3553850 0.2751455 0.7248545 0.5714540 0.4285460 0.6363635 0.3636365 0.6374075 0.3625925 0.6397045 0.3602955 0.6432505 0.3567495 0.5811455 0.4188545 -90.18315 -92.87335 ## 3 CARHR000870_R 1.0000000 1 1.0000000 1 0.2229850 2.654365 0.6072565 0.3927435 0.4928865 0.5071135 0.6365870 0.3634130 0.6339005 0.3660995 0.6735320 0.3264680 0.6207140 0.3792860 0.5024625 0.4975375 0.5621570 0.4378430 0.7158015 0.2841985 0.5992305 0.4007695 -87.31455 -86.08080 ## 4 CARHR001290_R 1.0000000 1 1.0000000 1 0.1566040 2.094365 0.6936415 0.3063585 0.5618700 0.4381300 0.5884945 0.4115055 0.5595320 0.4404680 0.6767025 0.3232975 0.5444725 0.4555275 0.5622140 0.4377860 0.6802175 0.3197825 0.7084995 0.2915005 0.6056650 0.3943350 -75.51685 -74.23905 ## 5 CARHR001460_R 1.0000000 1 1.0000000 1 0.1027260 1.549844 0.6275635 0.3724365 0.5940575 0.4059425 0.6332530 0.3667470 0.6044705 0.3955295 0.6048025 0.3951975 0.6086210 0.3913790 0.5993465 0.4006535 0.5903205 0.4096795 0.5264095 0.4735905 0.5944350 0.4055650 -114.15700 -111.36700 ## 6 CARHR001580_R 1.0000000 1 1.0000000 1 0.0814270 1.526471 0.6900865 0.3099135 0.7413470 0.2586530 0.7172220 0.2827780 0.6608300 0.3391700 0.6532005 0.3467995 0.6957720 0.3042280 0.6996390 0.3003610 0.7128460 0.2871540 0.7250950 0.2749050 0.6830990 0.3169010 -106.90800 -104.81250 3.3.4 Analysis Environment sessionInfo() ## R version 4.5.0 (2025-04-11) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sequoia 15.6.1 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib; LAPACK version 3.12.1 ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## time zone: Asia/Tokyo ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] pROC_1.18.5 UpSetR_1.4.0 gridExtra_2.3 ggplot2_3.5.2 hespresso_1.0.0 ## ## loaded via a namespace (and not attached): ## [1] tensorA_0.36.2.1 sass_0.4.10 generics_0.1.4 lattice_0.22-7 digest_0.6.37 magrittr_2.0.3 evaluate_1.0.3 grid_4.5.0 RColorBrewer_1.1-3 bookdown_0.44 iterators_1.0.14 fastmap_1.2.0 plyr_1.8.9 foreach_1.5.2 doParallel_1.0.17 jsonlite_2.0.0 processx_3.8.6 backports_1.5.0 limma_3.64.1 ps_1.9.1 scales_1.4.0 codetools_0.2-20 jquerylib_0.1.4 abind_1.4-8 cli_3.6.5 rlang_1.1.6 cmdstanr_0.9.0 splines_4.5.0 withr_3.0.2 cachem_1.1.0 yaml_2.3.10 tools_4.5.0 parallel_4.5.0 checkmate_2.3.2 dplyr_1.1.4 locfit_1.5-9.12 vctrs_0.6.5 posterior_1.6.1 R6_2.6.1 lifecycle_1.0.4 edgeR_4.6.2 pkgconfig_2.0.3 progressr_0.15.1 pillar_1.10.2 bslib_0.9.0 gtable_0.3.6 Rcpp_1.1.0 glue_1.8.0 ## [49] statmod_1.5.0 tidyselect_1.2.1 xfun_0.52 tibble_3.2.1 rstudioapi_0.17.1 knitr_1.50 farver_2.1.2 htmltools_0.5.8.1 labeling_0.4.3 rmarkdown_2.29 compiler_4.5.0 distributional_0.5.0 "],["functions.html", "4 Functions", " 4 Functions The hespresso package is designed to detect homeologs with shifted expression ratios across diverse conditions using RNA-Seq data from allopolyploids. It provides two methods, HOBIT and HomeoRoq, which are implemented as the functions hobit() and homeoroq(), respectively. "],["hobit-1.html", "4.1 HOBIT", " 4.1 HOBIT HOBIT (Sun et al. 2025) is a statistical method designed to detect homeologs whose expression ratios differ across multiple conditions. It employs a likelihood ratio test (LRT) to compare two hierarchical models: a full model that allows homeolog expression ratios to vary among conditions and a reduced model that assumes constant ratios across all conditions. HOBIT models homeolog expression with a negative binomial (NB) distribution. Specifically, the expression level of a homeolog on the \\(i\\)-th subgenome, denoted as \\(x_i\\), is assumed to follow an NB distribution with mean \\(\\mu\\theta_i\\) and dispersion \\(\\phi\\), \\[ x_{i} \\sim NB(\\mu\\theta_{i}, \\phi) \\] where \\(\\mu\\) represents the total gene expression across all subgenomes and \\(\\theta_{i}\\) denotes the homeolog expression ratio for the \\(i\\)-th subgenome. By default, HOBIT samples the parameters \\(\\mu\\) and \\(\\boldsymbol{\\theta} = \\left(\\theta_{1}, \\theta_{2}, \\cdots \\right)\\) from non-informative prior (NIP) distributions. The dispersion parameter \\(\\phi\\) is estimated using the estimateDisp() function from the edgeR package (Chen et al. 2025). Based on these assumptions, HOBIT performs Markov chain Monte Carlo (MCMC) sampling to fit both the full and reduced models and to compute their respective likelihoods. Then, a LRT is conducted using the likelihoods derived from the two models. The hobit() function provides an end-to-end interface for parameter estimation, model fitting, likelihood computation, and hypothesis testing. It internally uses the sample() function from the cmdstanr package (Gabry et al. 2025) to perform MCMC sampling, inheriting its configuration options for flexible and scalable inference. 4.1.1 Inputs The hobit() function requires an input object of class ExpMX. To create this object from real RNA-Seq data, users need to provide the following three components: a gene expression matrix a vector or data.frame of condition labels a mapping table to organize gene expression data into homeolog expression The following example shows how to load gene expression data, define experimental conditions, and load the mapping table from a file. The gene expression matrix should be a data.frame or matrix, with row names corresponding to gene names. gexp &lt;- read.table(&quot;../data/c_flexuosa.0516.mini.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;, row.names = 1) head(gexp) ## wet_1 wet_2 wet_3 dry_1 dry_2 dry_3 ## CARHR000350_H 21 8 17 19 10 14 ## CARHR000580_H 24 21 14 26 11 19 ## CARHR001360_H 440 264 364 394 272 248 ## CARHR001380_H 36 109 48 52 52 32 ## CARHR001400_H 10 11 59 30 23 27 ## CARHR001480_H 27 17 49 40 25 15 The condition labels can be provided as a vector or a data.frame. group &lt;- c(&quot;wet&quot;, &quot;wet&quot;, &quot;wet&quot;, &quot;dry&quot;, &quot;dry&quot;, &quot;dry&quot;) group ## [1] &quot;wet&quot; &quot;wet&quot; &quot;wet&quot; &quot;dry&quot; &quot;dry&quot; &quot;dry&quot; The mapping table (mapping_table) is a data.frame in which the first and second columns correspond to gene names from C. hirsuta and C. amara, respectively. It is assumed that all gene names in both columns appear in the row names of gene expression matrix (gexp). mapping_table &lt;- read.table(&quot;../data/c_flexuosa.homeolog.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;) head(mapping_table) ## C_hirsuta C_amara ## 1 CARHR000010_H CARHR000010_A ## 2 CARHR000060_H CARHR000060_A ## 3 CARHR000070_H CARHR000070_A ## 4 CARHR000090_H CARHR000090_A ## 5 CARHR000110_H CARHR000110_A ## 6 CARHR000120_H CARHR000120_A Once the three required components are prepared, an ExpMX object can be created using the newExpMX() function. x &lt;- newExpMX(gexp, group, mapping_table) x ## # 2 subgenomes (C_hirsuta, C_amara) ## # 1000 homeologs ## --------------------- ## Experiment Design: ## group ## 1 wet ## 2 wet ## 3 wet ## 4 dry ## 5 dry ## 6 dry ## --------------------- ## &gt; subgenome: C_hirsuta ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 21 8 17 19 10 14 ## [2,] 24 21 14 26 11 19 ## [3,] 440 264 364 394 272 248 ## [4,] 36 109 48 52 52 32 ## [5,] 10 11 59 30 23 27 ## [6,] 27 17 49 40 25 15 ## +++++++++++++++++++++ ## &gt; subgenome: C_amara ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 152 168 183 151 92 75 ## [2,] 54 44 49 46 22 27 ## [3,] 344 181 242 257 203 183 ## [4,] 73 150 49 43 37 32 ## [5,] 4 0 2 2 6 1 ## [6,] 30 23 124 48 32 28 ## --------------------- 4.1.2 Test Usually, normalization is required to correct for differences in library sizes across replicates. If the given expression data (gexp) have not been normalized, apply an appropriate normalization method before analysis. In this example, we normalize the data using the norm_counts() function provided in the hespresso package. x &lt;- norm_counts(x) By default, norm_counts() function performs TMM normalization by internally calling the edgeR package (Robinson and Oshlack 2010; Chen et al. 2025). However, users may choose to perform normalization using other appropriate packages such as DESeq2 (Love et al. 2014). Note that, this step can be skipped if the expression data has already been normalized, such as FPKM and TPM. Once the ExpMX object has been prepared and the data have been normalized, homeologs with shifted expression ratios can be detected using HOBIT by running the hobit() function, as shown below. x_output &lt;- hobit(x) 4.1.3 Outputs The result (x_output) is a data.frame object, with one row per homeolog. The row order corresponds to the input, and the columns summarize the results of the statistical test. gene: Homeolog ID. The gene names defined in the first column of the mapping table. pvalue: p-value from the LRT using normalized likelihoods. qvalue: Adjusted p-value using the Benjamini-Hochberg method. raw_pvalue: p-value from the LRT using raw likelihoods. raw_qvalue: Adjusted raw p-value using the Benjamini-Hochberg method. Dmax: Maximum absolute difference of homeolog expression ratios between conditions. ORmax: Maximum odds ratio of homeolog expression ratios between conditions. theta0__&lt;s&gt;: Posterior homeolog expression ratio estimates shared across all conditions, where &lt;s&gt; denotes the subgenome name. These parameters are used to compute the log-likelihood of the reduced model. theta__&lt;s&gt;__&lt;g&gt;: Posterior homeolog expression ratio estimates specific to each condition, where &lt;s&gt; denotes the subgenome name and and &lt;g&gt; denotes the group name. These parameters are used to compute the log-likelihood of the full model. logLik_H1: Log-likelihood of the full model. logLik_H0: Log-likelihood of the reduced model. head(x_output) ## gene pvalue qvalue raw_pvalue raw_qvalue Dmax ORmax theta__C_hirsuta__dry theta__C_amara__dry theta__C_hirsuta__wet theta__C_amara__wet theta0__C_hirsuta theta0__C_amara logLik_H1 logLik_H0 ## 1 CARHR000350_H 0.3329165 1 0.2469988 1 0.04285630 1.632985 0.1237820 0.8762180 0.07984355 0.92015650 0.1032560 0.8967440 -47.12410 -47.77205 ## 2 CARHR000580_H 0.6029891 1 0.5340392 1 0.08695550 1.483685 0.3778220 0.6221780 0.29002300 0.70997700 0.3377145 0.6622855 -42.34160 -42.42485 ## 3 CARHR001360_H 1.0000000 1 1.0000000 1 0.00078200 1.003275 0.5802315 0.4197685 0.58026950 0.41973050 0.5801480 0.4198520 -67.37725 -67.02965 ## 4 CARHR001380_H 0.3502746 1 0.2640882 1 0.13138900 1.713870 0.5479325 0.4520675 0.41441100 0.58558900 0.4822940 0.5177060 -68.00180 -68.77350 ## 5 CARHR001400_H 0.6444191 1 0.5810750 1 0.04599315 1.812507 0.8838030 0.1161970 0.93227600 0.06772415 0.9037260 0.0962739 -41.85440 -41.94350 ## 6 CARHR001480_H 0.9067870 1 0.8886615 1 0.05771650 1.279647 0.4142085 0.5857915 0.35662800 0.64337200 0.3841715 0.6158285 -54.01690 -53.90250 4.1.4 Options 4.1.4.1 Basic Options Below is a basic example of running the hobit() function. x_output &lt;- hobit(x) By default, hobit() uses multiple threads, defined by the mc.cores option in the global environment, for MCMC sampling, If mc.cores is not set, it defaults to using a single thread. Users can customize the number of threads to accelerate the testing process by either setting mc.cores (e.g., options(mc.cores = 8)) or specifying the n_threads argument directly. For example: x_output &lt;- hobit(x, n_threads = 8) Additionally, user can control parallelization of the MCMC sampling process via the parallel_chains argument. When specified, this argument is passed directly to the sample() function from the cmdstanr package, allowing parallel execution of MCMC chains. For example, to run four parallel chains, each on a separate thread: x_output &lt;- hobit(x, n_threads = 1, parallel_chains = 4, chains = 4) Note that the n_threads and parallel_chains arguments control parallelization at different stages. The n_threads argument controls parallelization during the processing of homeologs, while parallel_chains controls parallelization during MCMC chains. Hence, if both are specified, users should reserve n_threads Ã— parallel_chains threads. 4.1.4.2 Model Options By default, HOBIT assumes that homeolog expression follows a NB distribution. In this model, the mean is sampled from a NIP distribution, and the dispersion parameter is estimated using the estimateDisp() function from the edgeR package (Chen et al. 2025). In addition to these defaults, HOBIT provides options for users to customize these assumptions as needed. To switch from the default NB distribution to a zero-inflated negative binomial (ZINB) distribution, user can set dist = \"ZINB\". x_output &lt;- hobit(x, dist = &quot;ZINB&quot;) By default, homeolog expression ratios are sampled from NIP distributions, with the constraint that their sum equals 1. Beside the defaults, HOBIT also supports using a Dirichlet prior distribution, with parameters estimated from the observed homeolog expression values. This can be enabled by setting the use_Dirichlet option, as shown below. x_output &lt;- hobit(x, use_Dirichlet = TRUE) The default dispersion estimation method requires multiple biological replicates per group. If the dataset contains only a single replicate per group, dispersion estimation will fail. In such cases, HOBIT provides the no_replicate option. When set to TRUE, all replicates are treated as if they belong to a single group for dispersion estimation. x_output &lt;- hobit(x, no_replicate = TRUE) Note that while dispersion estimation without replicates can be enabled by setting no_replicate = TRUE, this approach is not recommended for biological experiments. For reliable statistical inference, we strongly encourage reconsidering the experimental design to include multiple biological replicates per group. 4.1.4.3 MCMC Options Several options control the behavior of MCMC sampling and can significantly affect the accuracy and efficiency of inference. Although hobit() supports all options available in the sample() function from the cmdstanr package, the following are particularly important. chains: Number of MCMC chains to run (default: 4). iter_warmup: Number of warmup iterations per chain (default: 1000). iter_sampling: Number of post-warmup iterations per chain (default: 1000). save_warmup: Whether to save warmup iterations (default: FALSE). thin: Interval at which samples are saved (default: 1). Typically unchanged unless memory issues arise. max_treedepth: Maximum tree depth for the NUTS sampler (default: 10). Increasing it may help resolve convergence issues but slows execution. adapt_delta: Target acceptance rate for the sampler (default: 0.8). Higher values improve stability but may reduce speed. The following example increases the number of chains and iterations to improve stability and convergence, though at the cost of longer execution times: x_output &lt;- hobit(x, chains = 8, iter_warmup = 2000, iter_sampling = 10000) If warnings or convergence issues arise with the default settings, consider increasing max_treedepth and adapt_delta. Note that increasing these parameters may result in slower sampling. x_output &lt;- hobit(x, max_treedepth = 12, adapt_delta = 0.95) For more advanced configuration options, refer to the cmdstanr documentation. 4.1.4.4 Verbosity Options Verbosity options are available to control the verbosity of progress messages during sampling. refresh: Frequency of progress updates to the console (default: 100). Set to 0 to suppress updates. show_messages: Whether to print all diagnostic and progress messages (default: TRUE). To reduce console output during execution, adjust these settings as shown below. x_output &lt;- hobit(x, refresh = 0, show_messages = FALSE) "],["homeoroq-1.html", "4.2 HomeoRoq", " 4.2 HomeoRoq HomeoRoq (Akama et al. 2014) estimates the probability that homeolog expression ratios remain constant between two experimental groups using RNA-Seq read count data for each homeolog. Since this probability cannot be derived analytically, HomeoRoq adopts a Bayesian framework to approximate the posterior distribution of homeolog expression ratios under the null hypothesis of no change between conditions. The homeoroq() function provides a complete interface for detecting homeologs whose expression ratios differ between two conditions. By default, it performs 10,000 sampling iterations (iter_sampling = 1e4) per probability calculation and repeats the calculation four times (chians = 4). However, for robust and reproducible estimation of statistical significance (i.e., p-values), it is recommended to run multiple independent sampling replicates, each with a sufficiently large number of iterations. To reproduce the settings used in the original HomeoRoq implementation (Akama et al. 2014), set iter_sampling = 1e4 and chains = 10. 4.2.1 Inputs The homeoroq() function requires an input object of class ExpMX, same to the hobit() function. gexp &lt;- read.table(&quot;../data/c_flexuosa.0516.mini.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;, row.names = 1) group &lt;- c(&quot;wet&quot;, &quot;wet&quot;, &quot;wet&quot;, &quot;dry&quot;, &quot;dry&quot;, &quot;dry&quot;) mapping_table &lt;- read.table(&quot;../data/c_flexuosa.homeolog.txt.gz&quot;, header = TRUE, sep = &quot;\\t&quot;) x &lt;- newExpMX(gexp, group, mapping_table) 4.2.2 Test Once an ExpMX object is prepared, normalize the counts if the data have not already been normalized, then run the test using the homeoroq() function. x &lt;- norm_counts(x) x_output &lt;- homeoroq(x) 4.2.3 Outputs The result (x_output) is a data.frame class object with one row per homeolog, summarizing the statistical test results: gene: Homeolog ID. The gene names defined in the first column of the mapping table. pvalue: p-value from the likelihood ratio test. qvalue: Adjusted p-value using the Benjamini-Hochberg method. sumexp__&lt;s&gt;__&lt;g&gt;: Total read counts for subgenome &lt;s&gt; under condition &lt;g&gt;. ratio__&lt;s&gt;__&lt;g&gt;: HERs for subgenome &lt;s&gt; under condition &lt;g&gt;. ratio_sd: Standard deviation of HERs calculated from observed counts. head(x_output) ## gene pvalue qvalue sumexp__wet__C_hirsuta sumexp__wet__C_amara sumexp__dry__C_hirsuta sumexp__dry__C_amara ratio__wet__C_hirsuta ratio__dry__C_hirsuta ratio_sd ## 1 CARHR000350_H 0.564425 1 44.41277 504.994715 43.73729 319.95367 0.08083758 0.07970611 0.03421429 ## 2 CARHR000580_H 0.720325 1 60.75627 147.119479 56.29544 94.87458 0.29227204 0.27675177 0.05769653 ## 3 CARHR001360_H 0.999925 1 1054.50900 758.465421 937.45041 668.95348 0.58164582 0.55276942 0.01598056 ## 4 CARHR001380_H 0.429150 1 207.83502 295.104109 143.04677 117.38436 0.41324091 0.32647834 0.08361259 ## 5 CARHR001400_H 0.957500 1 71.75076 5.583816 83.95502 10.24313 0.92779663 0.93763805 0.10320192 ## 6 CARHR001480_H 0.996750 1 87.59598 159.502354 79.72566 110.13494 0.35449846 0.33326221 0.06667744 4.2.4 Options The number of iterations and number of samples drawn per iteration can be adjusted using the n_iters and iter_sampling arguments, respectively. For example: x_output &lt;- homeoroq(x, n_iters = 8, iter_sampling = 1e5) Additionally, the n_threads option can be used to run iterations in parallel. x_output &lt;- homeoroq(x, n_threads = 8, n_iters = 8, iter_sampling = 1e5) "],["evaluation-framework.html", "5 Evaluation Framework", " 5 Evaluation Framework This chapter presents a comprehensive framework for evaluating methods that detect shifts in homeolog expression ratios, such as HOBIT, using simulated datasets. It covers generating artificial datasets that mimic allotetraploid and allohexaploid species, visualizing the ground truth of homeolog expression patterns, and calculating standard evaluation metrics. "],["simulating-allotetraploid-data.html", "5.1 Simulating Allotetraploid Data", " 5.1 Simulating Allotetraploid Data The hespresso package provides functions to simulate artificial read counts for allotetraploid and allohexaploid species. By default, the simulation generates read counts for an allotetraploid with 10,000 homeologs across two conditions, each with three biological replicates. The mean and dispersion parameters are estimated from real RNA-Seq data from an allotetraploid Cardamine flexuosa dataset (Akiyama et al. 2021). To generate a simulated dataset with default options, run as follows. x &lt;- sim_homeolog_counts() x ## # 2 subgenomes (A, B) ## # 10000 homeologs ## --------------------- ## Experiment Design: ## group replicate ## 1 group_1 1 ## 2 group_1 2 ## 3 group_1 3 ## 4 group_2 1 ## 5 group_2 2 ## 6 group_2 3 ## --------------------- ## &gt; subgenome: A ## group_1__1 group_1__2 group_1__3 group_2__1 group_2__2 group_2__3 ## gene_1 27 22 16 14 14 22 ## gene_2 278 4 12 87 113 93 ## gene_3 614 316 433 437 228 631 ## gene_4 360 341 311 359 237 411 ## gene_5 138 42 214 150 189 165 ## gene_6 1028 1063 1171 383 385 342 ## +++++++++++++++++++++ ## &gt; subgenome: B ## group_1__1 group_1__2 group_1__3 group_2__1 group_2__2 group_2__3 ## gene_1 9 21 11 21 19 21 ## gene_2 124 107 123 218 187 200 ## gene_3 162 149 206 180 235 259 ## gene_4 373 329 384 353 269 374 ## gene_5 63 45 69 75 49 43 ## gene_6 101 93 102 67 98 83 ## --------------------- Options can be flexibly customized by users. For example, to simulate data with 1,000 homeologs and 5 replicates per condition, run as follows. x &lt;- sim_homeolog_counts(n_gene = 1000, n_replicates = c(5, 5)) x ## # 2 subgenomes (A, B) ## # 1000 homeologs ## --------------------- ## Experiment Design: ## group replicate ## 1 group_1 1 ## 2 group_1 2 ## 3 group_1 3 ## 4 group_1 4 ## 5 group_1 5 ## 6 group_2 1 ## 7 group_2 2 ## 8 group_2 3 ## 9 group_2 4 ## 10 group_2 5 ## --------------------- ## &gt; subgenome: A ## group_1__1 group_1__2 group_1__3 group_1__4 group_1__5 group_2__1 group_2__2 group_2__3 group_2__4 group_2__5 ## gene_1 59 58 58 51 47 70 43 71 53 45 ## gene_2 8 2 5 36 13 6 9 6 7 6 ## gene_3 4 4 4 4 9 0 0 1 8 0 ## gene_4 27 34 34 28 18 8 6 10 18 15 ## gene_5 52 43 32 54 37 31 10 5 22 10 ## gene_6 1273 1749 1696 2733 1867 1506 1748 1757 2009 1948 ## +++++++++++++++++++++ ## &gt; subgenome: B ## group_1__1 group_1__2 group_1__3 group_1__4 group_1__5 group_2__1 group_2__2 group_2__3 group_2__4 group_2__5 ## gene_1 12 3 36 0 7 23 21 19 26 13 ## gene_2 6 3 5 2 7 0 0 0 0 0 ## gene_3 6 7 9 10 4 8 8 12 8 8 ## gene_4 33 12 2 0 1 7 5 11 2 8 ## gene_5 202 136 178 156 189 188 167 163 167 153 ## gene_6 793 842 918 800 937 989 1112 845 945 992 ## --------------------- Simulated read counts are generated from a negative binomial (NB) distribution. The mean and dispersion values used for each homeolog are stored in the object returned by sim_homeolog_counts(). The get_sim_params() function can be used to retrieve these parameters. For example, to get means used for sampling read counts, run as follows. param_mu &lt;- get_sim_params(x, &quot;mu&quot;) names(param_mu) ## [1] &quot;group_1&quot; &quot;group_2&quot; head(param_mu[[&quot;group_1&quot;]]) ## A B ## gene_1 56.491374 17.328355 ## gene_2 8.006597 4.818938 ## gene_3 5.944184 6.766986 ## gene_4 28.174125 7.362780 ## gene_5 44.853340 166.388422 ## gene_6 1902.944015 899.045310 The output is a list of data frames, one per condition, with columns representing individual subgenomes. These ground-truth mean values can be used to calculate true homeolog expression ratios for each condition. Users can then define homeologs that show significant changes in expression ratios between conditions. Alternatively, the def_sigShift() function can automatically define homeologs with significant shifts without manual calculations. For example, to identify homeologs with a maximum absolute ratio difference (Dmax) greater than 0.2 or a maximum odds ratio (ORmax) exceeding 2.0, use the following code. x &lt;- sim_homeolog_counts() is_sig &lt;- def_sigShift(x, Dmax = 0.2, ORmax = 2, operator = &quot;OR&quot;) table(is_sig) ## is_sig ## FALSE TRUE ## 9260 740 The output shows the number of homeologs meeting these thresholds. To visualize the distribution of expression ratios across conditions, use the plot_HER_distr() function. This returns a list of histograms, one per condition, with ratios calculated by default for the first subgenome (base = 1). x &lt;- sim_homeolog_counts() distr_plots &lt;- plot_HER_distr(x) Since the simulated dataset contains two groups, the plot_HER_distr() function returns two histograms. names(distr_plots) ## [1] &quot;group_1&quot; &quot;group_2&quot; To display the distributions for each group, run as follows. library(ggplot2) library(gridExtra) grid.arrange(distr_plots[[&quot;group_1&quot;]] + ggtitle(&quot;group_1&quot;), distr_plots[[&quot;group_2&quot;]] + ggtitle(&quot;group_2&quot;), ncol = 2) Figure 5.1: Distribution of homeolog expression ratios in two simulated groups. To compare expression ratios between groups, use the plot_HER() function, which by default plots ratios for the first subgenome in a scatter plot. plot_HER(x, alpha = 0.3) Figure 5.2: Changes in homeolog expression ratios between two groups. Each point represents the expression ratio in group 1 (x-axis) and group 2 (y-axis). If the dataset was generated using sim_homeolog_counts(), ground-truth significant shifts can be highlighted as follows using the def_sigShift() function. is_sig &lt;- def_sigShift(x, Dmax = 0.2, ORmax = 2.0) plot_HER(x, label = is_sig, alpha = 0.3) Figure 5.3: Changes in homeolog expression ratios between two groups. Orange points indicate homeologs with significant changes in expression ratios, while gray points represent those without significant changes. "],["simulating-allohexaploid-data.html", "5.2 Simulating Allohexaploid Data", " 5.2 Simulating Allohexaploid Data To simulate read counts for an allohexaploid with three subgenomes, set n_subgenomes = 3. In this case, the mean and dispersion parameters are derived from real RNA-Seq data of allohexaploid wheat (Yang et al. 2021). x &lt;- sim_homeolog_counts(n_subgenomes = 3) Simulation parameters can be retrieved using the get_sim_params() function, and ground-truth homeologs with significant expression ratio shifts can be defined using the def_sigShift(), similar to the allotetraploid example. For exmaple, using the def_sigShift() function can define ground-truth RSHs, homeologs with large changes satisfied the given thresholds in any subgenome. is_sig &lt;- def_sigShift(x, Dmax = 0.2, ORmax = 2, operator = &quot;OR&quot;) table(is_sig) ## is_sig ## FALSE TRUE ## 9091 909 To define shifts specific to a single subgenome (e.g., the first subgenome), set the base argument accordingly as follows. x &lt;- sim_homeolog_counts(n_subgenomes = 3) is_sig &lt;- def_sigShift(x, base = 1, Dmax = 0.2, ORmax = 2, operator = &quot;OR&quot;) table(is_sig) ## is_sig ## FALSE TRUE ## 9577 423 Visualization of allohexaploid data, comprising three subgenomes, follows a similar workflow as for allotetraploids. To display the distribution of expression ratios for the first subgenome, run as follows. x &lt;- sim_homeolog_counts(n_subgenomes = 3) distr_plots_1 &lt;- plot_HER_distr(x) names(distr_plots_1) ## [1] &quot;group_1&quot; &quot;group_2&quot; library(ggplot2) library(gridExtra) grid.arrange(distr_plots_1[[&quot;group_1&quot;]] + ggtitle(&quot;group_1 on 1st subgenome&quot;), distr_plots_1[[&quot;group_2&quot;]] + ggtitle(&quot;group_2 on 1st subgenome&quot;), ncol = 2) Figure 5.4: Distribution of homeolog expression ratios for the first subgenome in a simulated allohexaploid across two groups. Users can specify which subgenome to use for calculating expression ratios with the base argument. For example, to visualize ratios for the second or third subgenome, run as follows. distr_plots_2 &lt;- plot_HER_distr(x, base = 2) distr_plots_3 &lt;- plot_HER_distr(x, base = 3) grid.arrange(distr_plots_1[[&quot;group_1&quot;]] + ggtitle(&quot;group_1 on #1&quot;), distr_plots_1[[&quot;group_2&quot;]] + ggtitle(&quot;group_2 on #1&quot;), distr_plots_2[[&quot;group_1&quot;]] + ggtitle(&quot;group_1 on #2&quot;), distr_plots_2[[&quot;group_2&quot;]] + ggtitle(&quot;group_2 on #2&quot;), distr_plots_3[[&quot;group_1&quot;]] + ggtitle(&quot;group_1 on #3&quot;), distr_plots_3[[&quot;group_2&quot;]] + ggtitle(&quot;group_2 on #3&quot;), ncol = 2) Figure 5.5: Distribution of homeolog expression ratios for all subgenomes in a simulated allohexaploid across two groups. The plot_HER() function also works for allohexaploids. By default, it plots expression ratios for the first subgenome. plot_HER(x, alpha = 0.3) Figure 5.6: Changes in homeolog expression ratios of the first subgenome between two groups. Each point represents the expression ratio of the first subgenome in both groups. To plot ratios for a specific subgenome, set the base argument. For example, to visualize the second subgenome, run as follows. plot_HER(x, base = 2, alpha = 0.3) Figure 5.7: Changes in homeolog expression ratios of the second subgenome between two groups. Each point represents the expression ratio of the second subgenome in both groups. Ground-truth shifts can be highlighted in the scatter plot using def_sigShift(). By default, shifts are defined across all subgenomes, so some homeologs may appear highlighted even if changes in the plotted subgenome are minor. is_sig &lt;- def_sigShift(x, base = 0, Dmax = 0.2, ORmax = 2) plot_HER(x, label = is_sig, alpha = 0.3) Figure 5.8: Changes in homeolog expression ratios of the first subgenome between two groups. Orange points indicate homeologs with significant changes in any subgenome, while gray points indicate no significant change. To highlight only homeologs that meet the thresholds in a specific subgenome, specify the base argument. is_sig_b1 &lt;- def_sigShift(x, base = 1, Dmax = 0.2, ORmax = 1.8) plot_HER(x, base = 1, label = is_sig_b1, alpha = 0.3) Figure 5.9: Changes in homeolog expression ratios of the first subgenome between two groups. Orange points indicate homeologs with significant changes in the first subgenome, while gray points show no significant change. "],["custom-data-simulation.html", "5.3 Custom Data Simulation", " 5.3 Custom Data Simulation Instead of relying on the default datasets based on C. flexuosa or wheat, users can provide their own expression matrix to calculate the mean and dispersion parameters for simulation. The matrix should have genes as rows and samples (biological replicates) as columns, with each cell containing a normalized read count. Below is an example showing how to load a custom matrix and use it as a template for simulation. expmx &lt;- read.table(&quot;../data/seed.c_flexuosa.txt.gz&quot;) head(expmx) ## V1 V2 V3 ## 1 90 50 6 ## 2 8 13 6 ## 3 319 351 472 ## 4 683 671 535 ## 5 258 162 160 ## 6 69 74 81 x &lt;- sim_homeolog_counts(seed_expmx = expmx) x ## # 2 subgenomes (A, B) ## # 10000 homeologs ## --------------------- ## Experiment Design: ## group replicate ## 1 group_1 1 ## 2 group_1 2 ## 3 group_1 3 ## 4 group_2 1 ## 5 group_2 2 ## 6 group_2 3 ## --------------------- ## &gt; subgenome: A ## group_1__1 group_1__2 group_1__3 group_2__1 group_2__2 group_2__3 ## gene_1 27 22 16 14 14 22 ## gene_2 278 4 12 87 113 93 ## gene_3 614 316 433 437 228 631 ## gene_4 360 341 311 359 237 411 ## gene_5 138 42 214 150 189 165 ## gene_6 1028 1063 1171 383 385 342 ## +++++++++++++++++++++ ## &gt; subgenome: B ## group_1__1 group_1__2 group_1__3 group_2__1 group_2__2 group_2__3 ## gene_1 9 21 11 21 19 21 ## gene_2 124 107 123 218 187 200 ## gene_3 162 149 206 180 235 259 ## gene_4 373 329 384 353 269 374 ## gene_5 63 45 69 75 49 43 ## gene_6 101 93 102 67 98 83 ## --------------------- This approach enables users to generate simulated datasets that closely resemble their own study system, facilitating realistic evaluation of HOBIT or related methods. "],["evaluation-framework-1.html", "5.4 Evaluation Framework", " 5.4 Evaluation Framework By combining the sim_homeolog_counts() and def_sigShift() functions, users can evaluate the performance of HOBIT using standard metrics such as precision, recall, F1 score, and area under the ROC curve (AUC). For reliable evaluation, we recommend simulating a large number of homeologs to ensure the dataset contains enough homeologs with significant expression ratio shifts for robust validation. To reduce computation time in this example, we simulate data for only 1,000 homeologs. x &lt;- sim_homeolog_counts(n_genes = 1000) x_output &lt;- hobit(x) Next, predicted homeologs with significant expression ratio shifts are identified using an FDR threshold of 0.05. Performance metrics are then calculated by comparing the predicted shifts against the ground-truth shifts, which are defined using the def_sigShift() function. The AUC is computed using the p-values from the hobit() output with the auc() and roc() functions from the pROC package (Robin et al. 2011). library(pROC) pred_sig &lt;- (x_output$qvalue &lt; 0.05) true_sig &lt;- def_sigShift(x, Dmax = 0.2, ORmax = 2, operator = &quot;OR&quot;) tp &lt;- sum(pred_sig &amp; true_sig) tn &lt;- sum(!pred_sig &amp; !true_sig) fp &lt;- sum(pred_sig &amp; !true_sig) fn &lt;- sum(!pred_sig &amp; true_sig) precision &lt;- tp / (tp + fp) recall &lt;- tp / (tp + fn) f1 &lt;- 2 * precision * recall / (precision + recall) auc &lt;- auc(roc(true_sig, 1 - x_output$pvalue, levels = c(FALSE, TRUE), direction = &quot;&lt;&quot;)) print(c(precision = precision, recall = recall, f1 = f1, auc = auc)) ## precision recall f1 auc ## 0.7058824 0.3243243 0.4444444 0.8994513 This workflow demonstrates a complete evaluation framework for HOBIT or related methods using simulated datasets, enabling users to assess accuracy and robustness in detecting shifts in homeolog expression ratios. "],["citations.html", "Citations", " Citations If you use HOBIT, please cite: Sun J, Sese J, and Shimizu KK. A moderated statistical test for detecting shifts in homeolog expression ratios in allopolyploids. bioRxiv 2025;2025.07.01.660977. 10.1101/2025.07.01.660977 If you use HomeoRoq, please cite: Akama S, Shimizu-Inatsugi R, Shimizu KK, and Sese J. Genome-wide quantification of homeolog expression ratio revealed nonstochastic gene regulation in synthetic allopolyploid Arabidopsis. Nucleic Acids Res. 2014;42(6):e46. 10.1093/nar/gkt1376 "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
